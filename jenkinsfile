pipeline {

    agent any

 

    tools {

        // Install the Maven version configured as "M3" and add it to the path.

        maven "M2_HOME"

    }

    environment {

                        NEXUS_URL = 'http://192.168.43.254:8081'

                        NEXUS_REPOSITORY_ID = 'deploymentRepo'

                        NEXUS_REPOSITORY_URL = 'http://192.168.43.254:8081/repository/maven-releases'

            }

    stages {

        stage('CheckOut') {

            steps {

                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/wajdi-HUB/testDevopsRepo.git/']])            

 

            }

        }

        stage('MAVEN VERSION') {

            steps {

                sh """mvn --version"""

            }

        }

        stage('MVN COMPILE') {

            steps {

                                                echo "building ..."

                                                sh 'mvn clean compile'

            }

        }

        stage('MVN CLEAN INSTALL') {

            steps {

                // Checkout your source code from version control system

                // ...

                echo 'Build..';

                // Invoke Maven build

                sh 'mvn clean install'

                                    }

                        }

        stage('BUILD') {

            steps {

                sh "mvn clean package"

            }

        }

 

                        stage("CLEAN VERIFY") {

                                    steps {

                                                echo 'testing ..';

                sh 'mvn clean verify'

                                    }

                        }      

                        stage("TEST JUNIT") {

                                    steps {

                                                echo 'testing ..';

                sh 'mvn test'

                                    }

                        }      

        stage('ANALYSE SONARQUBE') {

            steps {

                                                withSonarQubeEnv('SQ') {

                                                            sh "mvn sonar:sonar -Dsonar.login=admin -D sonar.password=sonar"

                                                }

            }

        }

                        stage("Publish to Nexus Repository Manager") {

                                    steps {

                                                echo 'Deploy..';

                                                sh "mvn deploy -DaltDeploymentRepository=${NEXUS_REPOSITORY_ID}::default::${NEXUS_REPOSITORY_URL} -s /usr/share/maven/conf/settings.xml"

                                    }

                        }

        stage('build image') {

            steps {

                script{

                    sh 'docker build -t wajdiihassyaoui/tpachatproject .'

                }

            }

        }

        stage('Push image to Hub'){

            steps{

                script{

                    withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerhubpwd')]) {

                        sh 'docker login -u wajdiihassyaoui -p ${dockerhubpwd}'

                        sh ' docker push wajdiihassyaoui/tpachatproject'            

                    }

                }

            }

        }

        stage('DÃ©ploiement avec Docker Compose') {

             steps {

                sh'docker-compose up -d'

            }

        }

        stage('Verification Status') {

            steps {

                sh' docker-compose ps '

            }

        }

    }

    post {

        success {

            jacoco()

            junit '**/target/surefire-reports/TEST-*.xml'

            archiveArtifacts 'target/*.jar'

        }

    }   

}
